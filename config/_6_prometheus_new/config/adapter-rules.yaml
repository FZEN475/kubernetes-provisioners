
rules:
  - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
    seriesFilters: []
    resources:
      overrides:
        namespace:
          resource: namespace
        pod:
          resource: pod
    name:
      matches: ^container_(.*)_seconds_total$
      as: ""
    metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[5m]))
      by (<<.GroupBy>>)
  - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
    seriesFilters:
      - isNot: ^container_.*_seconds_total$
    resources:
      overrides:
        namespace:
          resource: namespace
        pod:
          resource: pod
    name:
      matches: ^container_(.*)_total$
      as: ""
    metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[5m]))
      by (<<.GroupBy>>)
  - seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
    seriesFilters:
      - isNot: ^container_.*_total$
    resources:
      overrides:
        namespace:
          resource: namespace
        pod:
          resource: pod
    name:
      matches: ^container_(.*)$
      as: ""
    metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container!="POD"}) by (<<.GroupBy>>)
  - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
    seriesFilters:
      - isNot: .*_total$
    resources:
      template: <<.Resource>>
    name:
      matches: ""
      as: ""
    metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
  - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
    seriesFilters:
      - isNot: .*_seconds_total
    resources:
      template: <<.Resource>>
    name:
      matches: ^(.*)_total$
      as: ""
    metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)
  - seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
    seriesFilters: []
    resources:
      template: <<.Resource>>
    name:
      matches: ^(.*)_seconds_total$
      as: ""
    metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>)
externalRules:
  - metricsQuery: sum(rate(pod_cpu_usage_seconds_total{namespace=~"kube-system",pod=~"kube-apiserver-.*"}[3m]))
      by (namespace)
    name:
      as: custom_metric_cpu_usage_metrics_type_external
      matches: pod_cpu_usage_seconds_total
    resources:
      namespaced: false
    seriesQuery: '{__name__=~"pod_cpu_usage_seconds_total",namespace="kube-system"}'
  - seriesQuery: 'cpu_usage_status{node!=""}'
    metricsQuery: 'max(cpu_usage_status or vector(1) ) by ()'  # Агрегируем максимум по всем узлам
    name:
      as: "cpu_usage_alert"  # Имя новой метрики
resourceRules:
  cpu:
    containerLabel: container
    containerQuery: |
      sum by (<<.GroupBy>>) (
        irate (
            container_cpu_usage_seconds_total{<<.LabelMatchers>>,container!="",pod!=""}[120s]
        )
      )
    nodeQuery: |
      sum by (<<.GroupBy>>) (
        1 - irate(
          node_cpu_seconds_total{mode="idle"}[120s]
        )
        * on(namespace, pod) group_left(node) (
          node_namespace_pod:kube_pod_info:{<<.LabelMatchers>>}
        )
      )
      or sum by (<<.GroupBy>>) (
        1 - irate(
          windows_cpu_time_total{mode="idle", job="windows-exporter",<<.LabelMatchers>>}[4m]
        )
      )
    resources:
      overrides:
        namespace:
          resource: namespace
        node:
          resource: node
        pod:
          resource: pod
  memory:
    containerLabel: container
    containerQuery: |
      sum by (<<.GroupBy>>) (
        container_memory_working_set_bytes{<<.LabelMatchers>>,container!="",pod!=""}
      )
    nodeQuery: |
      sum by (<<.GroupBy>>) (
        node_memory_MemTotal_bytes{<<.LabelMatchers>>}
        -
        node_memory_MemAvailable_bytes{<<.LabelMatchers>>}
      )
      or sum by (<<.GroupBy>>) (
        windows_cs_physical_memory_bytes{job="windows-exporter",<<.LabelMatchers>>}
        -
        windows_memory_available_bytes{job="windows-exporter",<<.LabelMatchers>>}
      )
    resources:
      overrides:
        namespace:
          resource: namespace
        node:
          resource: node
        pod:
          resource: pod
  window: 5m