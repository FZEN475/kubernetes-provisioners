---


secretTargets:
  # If set to true, enable writing trust bundles to Kubernetes Secrets as a target.
  # trust-manager can only write to secrets which are explicitly allowed via either authorizedSecrets or authorizedSecretsAll.
  # Note that enabling secret targets will grant trust-manager read access to all secrets in the cluster.
  enabled: true
  # If set to true, grant read/write permission to all secrets across the cluster. Use with caution!
  # If set, ignores the authorizedSecrets list.
  authorizedSecretsAll: true
  # A list of secret names which trust-manager will be permitted to read and write across all namespaces.
  # These are the only allowable Secrets that can be used as targets. If the list is empty (and authorizedSecretsAll is false),
  # trust-manager can't write to secrets and can only read secrets in the trust namespace for use as sources.
  authorizedSecrets: []

namespace: "secrets"
defaultPackage:
  resources:
    requests:
      cpu: 150m
      memory: 128Mi


resources:
  requests:
    cpu: 150m
    memory: 128Mi


nodeSelector:
  kubernetes.io/hostname: "prod01"
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
                - linux
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
            - key: node-role.kubernetes.io/control-plane
              operator: Exists
tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"

filterExpiredCertificates:
  # Whether to filter expired certificates from the trust bundle.
  enabled: false
app:
  # The format of trust-manager logging. Accepted values are text or json.
  logFormat: json
  # The verbosity of trust-manager logging. This takes a value from 1-5, with the higher value being more verbose.
  logLevel: 1
  leaderElection:
    # The duration that non-leader candidates will wait to force acquire leadership.
    # The default should be sufficient in a healthy cluster but can be slightly increased to prevent trust-manager from restart-looping when the API server is overloaded.
    leaseDuration: 15s
    # The interval between attempts by the acting leader to renew a leadership slot before it stops leading.
    # This MUST be less than or equal to the lease duration.
    # The default should be sufficient in a healthy cluster but can be slightly increased to prevent trust-manager from restart-looping when the API server is overloaded.
    renewDeadline: 10s
  readinessProbe:
    # The container port on which to expose the trust-manager HTTP readiness probe using the default network interface.
    port: 6060
    # The path on which to expose the trust-manager HTTP readiness probe using the default network interface.
    path: "/readyz"
  trust:
    # The namespace used as the trust source. Note that the namespace _must_ exist
    # before installing trust-manager.
    namespace: secrets
  securityContext:
    # If false, disables the default seccomp profile, which might be required to run on certain platforms.
    seccompProfileEnabled: true
  # Pod labels to add to trust-manager pods.
  podLabels: {}
  # Pod annotations to add to trust-manager pods.
  podAnnotations: {}
  # +docs:section=Webhook
  webhook:
    # Host that the webhook listens on.
    host: 0.0.0.0
    # Port that the webhook listens on.
    port: 6443
    # Timeout of webhook HTTP request.
    timeoutSeconds: 5
    service:
      # The type of Kubernetes Service used by the Webhook.
      type: ClusterIP
      # Set the ip family policy to configure dual-stack see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services)
      ipFamilyPolicy: ""
      # Sets the families that should be supported and the order in which they should be applied to ClusterIP as well. Can be IPv4 and/or IPv6.
      ipFamilies: []
      # The nodePort set on the Service used by the webhook.
      # +docs:property
      # nodePort: 8080
    tls:
      helmCert:
        # Whether to issue a webhook cert using Helm, which removes the need to install cert-manager.
        # Helm-issued certificates can be challenging to rotate and maintain, and the issued cert will have a duration of 10 years and be modified when trust-manager is updated.
        # It's safer and easier to rely on cert-manager for issuing the webhook cert - avoid using Helm-generated certs in production.
        enabled: false
      approverPolicy:
        # Whether to create an approver-policy CertificateRequestPolicy allowing auto-approval of the trust-manager webhook certificate. If you have approver-policy installed, you almost certainly want to enable this.
        enabled: false
        # The namespace in which cert-manager was installed. Only used if `app.webhook.tls.approverPolicy.enabled` is true.
        certManagerNamespace: "secrets"
        # The name of cert-manager's Service Account. Only used if `app.webhook.tls.approverPolicy.enabled` is true.
        certManagerServiceAccount: "cert-manager"
    # This value specifies if the app should be started in hostNetwork mode. It is required for use in some managed Kubernetes clusters (such as AWS EKS) with custom CNI.
    hostNetwork: false
  # +docs:section=Metrics
  metrics:
    # The port for exposing Prometheus metrics on 0.0.0.0 on path '/metrics'.
    port: 9402
    # The service to expose metrics endpoint.
    service:
      # Create a Service resource to expose the metrics endpoint.
      enabled: true
      # The Service type to expose metrics.
      type: ClusterIP
      # Set the ip family policy to configure dual-stack see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services)
      ipFamilyPolicy: ""
      # Sets the families that should be supported and the order in which they should be applied to ClusterIP as well. Can be IPv4 and/or IPv6.
      ipFamilies: []
      # The ServiceMonitor resource for this Service.
      servicemonitor:
        # Create a Prometheus ServiceMonitor for trust-manager.
        enabled: true
        # Sets the value of the "prometheus" label on the ServiceMonitor.
        # This is used so that separate Prometheus instances can select different ServiceMonitors using labels.
        prometheusInstance: default
        # The interval to scrape the metrics.
        interval: 10s
        # The timeout for a metrics scrape.
        scrapeTimeout: 5s
        # Additional labels to add to the ServiceMonitor.
        labels: {}
podDisruptionBudget:
  # Enable or disable the PodDisruptionBudget resource.
  #
  # This prevents downtime during voluntary disruptions such as during a Node upgrade.
  # For example, the PodDisruptionBudget will block `kubectl drain`
  # if it is used on the Node where the only remaining trust-manager
  # Pod is currently running.
  enabled: false
  # This configures the minimum available pods for disruptions. It can either be set to
  # an integer (e.g. 1) or a percentage value (e.g. 25%).
  # It cannot be used if `maxUnavailable` is set.
  # +docs:type=unknown
  # +docs:property
  # minAvailable: 1

  # This configures the maximum unavailable pods for disruptions. It can either be set to
  # an integer (e.g. 1) or a percentage value (e.g. 25%).
  # it cannot be used if `minAvailable` is set.
  # +docs:type=unknown
  # +docs:property
  # maxUnavailable: 1
# Labels to apply to all resources
commonLabels: {}