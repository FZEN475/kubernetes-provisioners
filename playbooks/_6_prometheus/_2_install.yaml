---
#- name: Add stable chart repo prometheus-community
#  kubernetes.core.helm_repository:
#    name: "{{ item.name }}"
#    repo_url: "{{ item.url }}"
#    repo_state: "present"
#    force_update: true
#  with_items:
#    - {name: "prometheus-community", url: "https://prometheus-community.github.io/helm-charts"}
#    - {name: "grafana", url: "https://grafana.github.io/helm-charts"}
#




#
#- name: Remove CIRDs prometheus
#  kubernetes.core.helm:
#    name: prometheus-cird
#    chart_ref: prometheus-community/prometheus-operator-crds
#    release_namespace: monitoring
#    create_namespace: true
#    wait: true
#    state: absent
#
#- name: Remove prometheus
#  kubernetes.core.helm:
#    name: prometheus
#    state: absent
#    chart_ref: prometheus-community/kube-prometheus-stack
#    release_namespace: monitoring
#    create_namespace: true
#    wait: true
#    values_files:
#      - /tmp/values_kube_state_metrics.yaml
#
#- name: Copy values
#  ansible.builtin.copy:
#    src: '/source/config/_6_prometheus_new/_1_values.yaml'
#    dest: '/tmp/values_prometheus.yaml'
#    mode: "0640"
#
#- name: Install prometheus
#  kubernetes.core.helm:
#    name: prometheus
#    state: present
#    chart_ref: prometheus-community/kube-prometheus-stack
#    release_namespace: monitoring
#    create_namespace: true
#    wait: true
#    values_files:
#      - /tmp/values_prometheus.yaml
#
#- name: ConfigMap grafana-datasource
#  kubernetes.core.k8s:
#    state: present
#    wait: true
#    definition:
#      apiVersion: v1
#      kind: ConfigMap
#      metadata:
#        name: grafana-datasource
#        namespace: 'monitoring'
#        labels:
#          grafana_datasource: ""
#      data:
#        datasource.yaml: "{{ lookup('ansible.builtin.file', '/source/config/_6_prometheus_new/config/datasource.yaml') }}"
#
- name: Creating tmp_kube_state_metrics_dashboard_json
  ansible.builtin.set_fact:
    tmp_kube_state_metrics_dashboard_json: "{{ lookup('ansible.builtin.file', '/source/config/_6_prometheus_new/config/kube-state-metrics-dashboard.json') | replace('\n','')  }}"

- name: Creating tmp_custom_dashboard_json
  ansible.builtin.set_fact:
    tmp_custom_dashboard_json: "{{ lookup('ansible.builtin.file', '/source/config/_6_prometheus_new/config/custom-dashboard.json') | replace('\n','')  }}"

- name: Creating tmp_loki_dashboard_json
  ansible.builtin.set_fact:
    tmp_loki_dashboard_json: "{{ lookup('ansible.builtin.file', '/source/config/_6_prometheus_new/config/loki-dashboard.json') | replace('\n','')  }}"

- name: ConfigMap grafana-config
  kubernetes.core.k8s:
    state: present
    wait: true
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: grafana-dashboard
        namespace: 'monitoring'
        labels:
          grafana_dashboard: ""
      data:
        dashboard01.json: "{{ tmp_kube_state_metrics_dashboard_json | to_json }}"
        dashboard02.json: "{{ tmp_custom_dashboard_json | to_json }}"
        dashboard03.json: "{{ tmp_loki_dashboard_json | to_json }}"


- name: ConfigMap alertmanager-config
  kubernetes.core.k8s:
    state: present
    wait: true
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: alertmanager-config
        namespace: 'monitoring'
        labels:
          alertmanager_config: ""
      data:
        alertmanager.yml: "{{ lookup('ansible.builtin.file', '/source/config/_6_prometheus_new/config/alertmanager.yml') }}"


- name: ConfigMap loki-rule
  kubernetes.core.k8s:
    state: present
    wait: true
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: loki-rule
        namespace: 'monitoring'
        labels:
          loki_rule: ""
      data:
        loki-alerts-rules.yaml: "{{ lookup('ansible.builtin.file', '/source/config/_6_prometheus_new/config/loki-alerts-rules.yaml') }}"

#- name: Remove prometheus-adapter
#  kubernetes.core.helm:
#    name: prometheus-adapter
#    chart_ref: prometheus-community/prometheus-adapter
#    release_namespace: monitoring
#    create_namespace: true
#    wait: yes
#    state: absent
#
#- name: Copy values
#  ansible.builtin.copy:
#    src: '/source/config/_6_prometheus_new/_2_values-prometheus-adapter.yaml'
#    dest: '/tmp/values_prometheus_adapter.yaml'
#    mode: "0640"
#
#- name: Install prometheus-adapter
#  kubernetes.core.helm:
#    name: prometheus-adapter
#    chart_ref: prometheus-community/prometheus-adapter
#    release_namespace: monitoring
#    create_namespace: true
#    wait: yes
#    state: present
#    values_files:
#      - /tmp/values_prometheus_adapter.yaml


#- name: Remove loki
#  kubernetes.core.helm:
#    name: loki
#    chart_ref: grafana/loki
#    release_namespace: monitoring
#    create_namespace: true
#    wait: yes
#    state: absent
#
#- name: Copy values
#  ansible.builtin.copy:
#    src: '/source/config/_6_prometheus_new/_3_values_loki.yaml'
#    dest: '/tmp/values_loki.yaml'
#    mode: "0640"
#
#- name: Install loki
#  kubernetes.core.helm:
#    name: loki
#    chart_ref: grafana/loki
#    release_namespace: monitoring
#    create_namespace: true
#    wait: yes
#    state: present
#    values_files:
#      - /tmp/values_loki.yaml


#- name: Remove promtail
#  kubernetes.core.helm:
#    name: promtail
#    chart_ref: grafana/promtail
#    release_namespace: monitoring
#    create_namespace: true
#    wait: yes
#    state: absent
#
#- name: Copy values
#  ansible.builtin.copy:
#    src: '/source/config/_6_prometheus_new/_4_values_promtail.yaml'
#    dest: '/tmp/values_promtail.yaml'
#    mode: "0640"
#
#- name: Install promtail
#  kubernetes.core.helm:
#    name: promtail
#    chart_ref: grafana/promtail
#    release_namespace: monitoring
#    create_namespace: true
#    wait: yes
#    state: present
#    values_files:
#      - /tmp/values_promtail.yaml

- name: AlertmanagerConfig alertmanager-config
  kubernetes.core.k8s:
    state: present
    wait: true
    definition:
      apiVersion: monitoring.coreos.com/v1alpha1
      kind: AlertmanagerConfig
      metadata:
        name: telegram-alerts
        namespace: monitoring
        labels:
          alertmanager_config: ""
      spec:
        receivers:
          - name: "telegram-notifications"
            telegramConfigs:
              - botToken:
                  key: "bot-token"
                  name: "alert-manager-secrets"
                chatID: -1002513698810
                apiURL: "https://api.telegram.org"
                messageThreadID: 2
#                message: !unsafe "ALERT: {{ .CommonLabels.alertname }} ({{ .CommonLabels.severity }})"
#                parse_mode: "HTML"  # Проще, чем MarkdownV2
#                message: !unsafe "🚨 Alertmanager 🚨\n--\n🔺 Alertname: {{ .GroupLabels.alertname}}\n🔺 Severity: {{ .CommonLabels.severity }}\n📌 {{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}"
                message: !unsafe |-
                  {{ if eq .Status "firing" }}🔴{{ else }}🟢{{ end }} [{{ .Status | toUpper }}]
                  {{ range .Alerts }}
                  *Alert:* {{ .Labels.alertname }}
                  *Severity:* {{ .Labels.severity }}
                  {{ if .Annotations.summary }}*Summary:* {{ .Annotations.summary }}{{ end }}
                  {{ if .Annotations.description }}*Details:* {{ .Annotations.description }}{{ end }}
                  {{ end }}
                sendResolved: true
                parseMode: "HTML"  # Поддержка форматирования (Markdown/V2)
        route:
          groupBy: ['alertname']
          receiver: "telegram-notifications"

- name: PrometheusRule custom-rule
  kubernetes.core.k8s:
    state: present
    wait: true
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        name: custom-rule
        namespace: monitoring
        labels:
          release: prometheus
      spec:
        groups:
          - name: cpu-usage
            rules:
              - alert: HighCPUUsage
                expr: !unsafe |
                  100 - (avg by(node) (irate(node_cpu_seconds_total{mode="idle", node=~"control01|dev01|prod01"}[5m])) * 100) > 10
                for: 5m
                labels:
                  severity: warning
                annotations:
                  summary: !unsafe "High CPU usage on {{ $labels.instance }}"
                  description: !unsafe "CPU usage on {{ $labels.instance }} is {{ $value }}% for more than 5 minutes."

              - record: cpu_usage_status
                expr: !unsafe |
                  (100 - (avg by(node) (irate(node_cpu_seconds_total{mode="idle", node=~"control01|dev01|prod01"}[5m])) * 100)) <= bool 10
                labels:
                  severity: info